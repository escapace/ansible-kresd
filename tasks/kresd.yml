---

- name: install knot resolver
  package:
    name: ['knot-resolver', 'lua5.1-filesystem']
    state: present

- name: set recommended kernel parameters
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items: "{{ kresd_kernel_params }}"
  register: kresd_kernel_params_result
  ignore_errors: True

- name: failed to set recommended kernel parameters
  fail: msg="failed to set recommended kernel parameters"
  when: (kresd_kernel_params_result is failed and (not kresd_role_debug|bool))

- name: /etc/knot-resolver directory
  file:
    path: /etc/knot-resolver
    owner: root
    group: knot-resolver
    mode: '0750'
    state: directory

- name: /etc/knot-resolver/kresd.conf.d directory
  file:
    path: /etc/knot-resolver/kresd.conf.d
    owner: root
    group: knot-resolver
    mode: '0750'
    state: directory

- name: fix file permissions
  file:
    path: "{{ item }}"
    state: touch
    owner: root
    group: knot-resolver
    mode: '0640'
    modification_time: preserve
    access_time: preserve
  loop:
    - "/etc/knot-resolver/icann-ca.pem"
    - "/etc/knot-resolver/root.hints"

- name: "populate package_facts"
  package_facts:
    manager: "auto"

- name: make sure line 'dns=none' is set in /etc/NetworkManager/NetworkManager.conf
  ini_file:
    path: /etc/NetworkManager/NetworkManager.conf
    state: present
    no_extra_spaces: yes
    section: main
    option: dns
    value: none
    owner: root
    group: root
    mode: 0644
    backup: yes
  when: "'NetworkManager' in ansible_facts.packages"
  notify:
    - kresd reload NetworkManager

- name: ensure cache directory exists
  file:
    dest: "/var/cache/knot-resolver"
    owner: root
    group: knot-resolver
    mode: '0770'
    state: directory
  changed_when: False

- name: ensure cache is mounted
  mount:
    path: "/var/cache/knot-resolver"
    src: tmpfs
    fstype: tmpfs
    opts: "size={{ kresd_cache_size }}m"
    state: mounted
  register: kresd_cache_mount_result
  ignore_errors: True

- name: failed to mount cache
  fail: msg="failed to mount cache"
  when: (kresd_cache_mount_result is failed and (not kresd_role_debug|bool))

- name: kresd.conf
  template:
    src: templates/kresd.conf.j2
    dest: /etc/knot-resolver/kresd.conf
    owner: root
    group: knot-resolver
    mode: 0640
  notify:
    - kresd restart

- name: kresd.conf.d files
  template:
    src: "{{ item }}"
    dest: /etc/knot-resolver/kresd.conf.d/{{ item | basename | regex_replace('.j2$', '') }}
    owner: root
    group: knot-resolver
    mode: 0640
  loop:
    - "000-cache.conf.j2"
    - "400-network-local.conf.j2"
    - "410-network-dummy.conf.j2"
    - "500-unprivileged.conf.j2"
    - "600-dnssec.conf.j2"
    - "620-module-bogus-log.conf.j2"
    - "620-module-hints.conf.j2"
    - "620-module-stats.conf.j2"
    - "630-module-policy.conf.j2"
    - "630-module-view.conf.j2"
    - "640-module-predict.conf.j2"
    - "640-module-workarounds.conf.j2"
    - "800-policy-forward.conf.j2"
    - "998-view-local.conf.j2"
    - "999-view-drop.conf.j2"
  notify:
    - kresd restart

- name: garbage collector daemon
  template:
    src: templates/kres-cache-gc.service.j2
    dest: /usr/lib/systemd/system/kres-cache-gc.service
    owner: root
    group: root
    mode: 0644
  notify:
    - kresd daemon-reload

- name: kresd daemon
  template:
    src: templates/kresd@.j2
    dest: /usr/lib/systemd/system/kresd@.service
    owner: root
    group: root
    mode: 0644
  notify:
    - kresd daemon-reload

- name: ensure that kresd is enabled
  service: name=kresd@{{ item }} enabled={{ item|int < kresd_threads|int }}
  with_sequence: start=0 end={{ kresd_max_threads|int - 1 }}

- name: ensure that kresd is running
  service: name=kresd@{{ item }} state={{ (item|int < kresd_threads|int) | ternary('started', 'stopped') }}
  with_sequence: start=0 end={{ kresd_max_threads|int - 1 }}

- name: ensure that kres-cache-gc is enabled
  service: name=kres-cache-gc enabled=true

- name: ensure that kresd is running
  service: name=kres-cache-gc state=started

- name: update resolv.conf
  template:
    src: templates/resolv.conf.j2
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644
  register: kresd_resolv_conf_result
  ignore_errors: True

- name: failed to update resolv.conf
  fail: msg="failed to update resolv.conf"
  when: (kresd_resolv_conf_result is failed and (not kresd_role_debug|bool))

- name: configure cloud-init
  template:
    src: "cloud-init.conf.j2"
    dest: /etc/cloud/cloud.cfg.d/10_dns.conf
    owner: root
    group: root
    mode: 0644
  when: "'cloud-init' in ansible_facts.packages"
