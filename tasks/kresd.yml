---

- name: install knot resolver
  ansible.builtin.package:
    name: ['knot-resolver', 'lua5.1-filesystem']
    state: present

- name: install http module
  ansible.builtin.package:
    name: ['knot-resolver-module-http']
    state: present
  when: kresd_prometheus_endpoint | bool is true
  tags:
    - kresd-conf

- name: install dnstap module
  ansible.builtin.package:
    name: ['knot-resolver-module-dnstap']
    state: present
  when: kresd_dnstap | bool is true
  tags:
    - kresd-conf

- name: /etc/knot-resolver directory
  ansible.builtin.file:
    path: /etc/knot-resolver
    owner: root
    group: knot-resolver
    mode: '0750'
    state: directory

- name: /etc/knot-resolver/kresd.conf.d directory
  ansible.builtin.file:
    path: /etc/knot-resolver/kresd.conf.d
    owner: root
    group: knot-resolver
    mode: '0750'
    state: directory
  tags:
    - kresd-conf

- name: fix file permissions
  ansible.builtin.file:
    path: "{{ item }}"
    state: touch
    owner: root
    group: knot-resolver
    mode: '0640'
    modification_time: preserve
    access_time: preserve
  loop:
    - "/etc/knot-resolver/icann-ca.pem"
    - "/etc/knot-resolver/root.hints"

- name: "populate package_facts"
  ansible.builtin.package_facts:
    manager: "auto"

- name: check that /etc/NetworkManager/NetworkManager.conf exists
  ansible.builtin.stat:
    path: /etc/NetworkManager/NetworkManager.conf
  register: kresd_network_manager_conf

- name: make sure line 'dns=none' is set in /etc/NetworkManager/NetworkManager.conf
  community.general.ini_file:
    path: /etc/NetworkManager/NetworkManager.conf
    state: present
    no_extra_spaces: true
    section: main
    option: dns
    value: none
    owner: root
    group: root
    mode: 0644
    backup: true
  when: kresd_network_manager_conf.stat.exists

- name: ensure cache directory exists
  ansible.builtin.file:
    dest: "/var/cache/knot-resolver"
    owner: root
    group: knot-resolver
    mode: '0770'
    state: directory
  changed_when: false

- name: ensure cache is mounted
  ansible.posix.mount:
    path: "/var/cache/knot-resolver"
    src: tmpfs
    fstype: tmpfs
    opts: "size={{ kresd_cache_size }}m"
    state: mounted
  register: kresd_cache_mount_result
  ignore_errors: true

- name: failed to mount cache
  ansible.builtin.fail:
    msg: "failed to mount cache"
  when: (kresd_cache_mount_result is failed and (not kresd_role_debug|bool))

- name: kresd.conf
  ansible.builtin.template:
    src: templates/kresd.conf.j2
    dest: /etc/knot-resolver/kresd.conf
    owner: root
    group: knot-resolver
    mode: 0640
  tags:
    - kresd-conf

- name: kresd.conf.d files
  ansible.builtin.template:
    src: "{{ item }}"
    dest: /etc/knot-resolver/kresd.conf.d/{{ item | basename | regex_replace('.j2$', '') }}
    owner: root
    group: knot-resolver
    mode: 0640
  loop:
    - "000-log-level.conf.j2"
    - "000-cache.conf.j2"
    - "400-network-local.conf.j2"
    - "500-unprivileged.conf.j2"
    - "600-dnssec.conf.j2"
    - "620-module-bogus-log.conf.j2"
    - "620-module-hints.conf.j2"
    - "620-module-stats.conf.j2"
    - "630-module-policy.conf.j2"
    - "630-module-view.conf.j2"
    - "640-module-predict.conf.j2"
    - "640-module-workarounds.conf.j2"
    - "640-module-dnstap.conf.j2"
    - "650-prometheus-endpoint.conf.j2"
    - "890-policy-forward.conf.j2"
    - "998-view-local.conf.j2"
    - "999-view-drop.conf.j2"
  tags:
    - kresd-conf

- name: garbage collector daemon
  ansible.builtin.template:
    src: templates/kres-cache-gc.service.j2
    dest: /usr/lib/systemd/system/kres-cache-gc.service
    owner: root
    group: root
    mode: 0644
  notify:
    - kresd daemon-reload

- name: create directory for systemd drop-ins
  ansible.builtin.file:
    path: /etc/systemd/system/kresd@.service.d
    owner: root
    group: root
    state: directory
    mode: 0755

- name: kresd daemon
  ansible.builtin.template:
    src: templates/kresd@.j2
    dest: /usr/lib/systemd/system/kresd@.service
    owner: root
    group: root
    mode: 0644
  notify:
    - kresd daemon-reload

- name: ensure that kresd is enabled
  ansible.builtin.service:
    name: "kresd@{{ item }}"
    enabled: "{{ item | int < kresd_threads | int }}"
  with_sequence: start=0 end={{ kresd_max_threads | int - 1 }}
  when: not kresd_role_debug|bool
  notify:
    - kresd update resolv.conf

- name: ensure that kres-cache-gc is enabled
  ansible.builtin.service:
    name: kres-cache-gc
    enabled: true
  when: not kresd_role_debug|bool

- name: ensure that systemd-resolved is disabled
  ansible.builtin.service:
    name: systemd-resolved
    enabled: false
  when: not kresd_role_debug|bool
  ignore_errors: true

- name: configure cloud-init
  ansible.builtin.template:
    src: "cloud-init.conf.j2"
    dest: /etc/cloud/cloud.cfg.d/10_dns.conf
    owner: root
    group: root
    mode: 0644
  when: "'cloud-init' in ansible_facts.packages"

- ansible.builtin.include_tasks: provider-ec2.yml
  when: provider is defined and provider == "ec2"
  tags:
    - kresd-conf
